module CLA_4bit(A,B,Cin,S,Cout);
	parameter n = 4;
	input[n-1:0]A, B;
	input Cin;
	output [n-1:0]S;
	output Cout;

	wire[3:0] G,P,C;

	assign G[3:0] = A&B;
	assign P[3:0] = A^B;
assign C[0] = Cin;
  	assign C[1] = G[0] | (P[0]&C[0]);
  	assign C[2] = G[1] | (P[1]&G[0]) | (P[1]&P[0]&C[0]);
  	assign C[3] = G[2] | (P[2]&G[1]) | (P[2]&P[1]&G[0]) | (P[2]&P[1]&P[0]&C[0]);
  	
assign Cout = G[3] | (P[3]&G[2]) | (P[3]&P[2]&G[1]) | (P[3]&P[2]&P[1]&G[0]) | (P[3]&P[2]&P[1]&P[0]&C[0]);
	assign S = P^C;

endmodule

module Adder_16bit(A,B,Cin,S,Cout);
	parameter n = 16;
	parameter m = 4;

	input[n-1:0]A;
	input[n-1:0]B;
	input Cin;
	output [n-1:0]S;
	output Cout;

	wire C4, C8, C12;
	wire [m - 1: 0] S0_3, S4_7, S8_11, S12_15;
	assign S = {S12_15, S8_11, S4_7, S0_3};
	
	CLA_4bit cla0(.A(A[3:0]), .B(B[3:0]), .Cin(Cin), .S(S0_3), .Cout(C4));
	CLA_4bit cla1(.A(A[7:4]), .B(B[7:4]), .Cin(C4), .S(S4_7), .Cout(C8));
	CLA_4bit cla2(.A(A[11:8]), .B(B[11:8]), .Cin(C8), .S(S8_11), .Cout(C12));
	CLA_4bit cla3(.A(A[15:12]), .B(B[15:12]), .Cin(C12), .S(S12_15), .Cout(Cout));

endmodule

module ALU(A,B,Cin,Mode,Y,Cout,Overflow);
	parameter n = 16;
	parameter m = 4;
	
	input[n-1:0]A,B;
	input Cin;
	input [m-1:0]Mode;

	output reg[n-1:0]Y;
	output reg Cout;
	output reg Overflow;	
	
	wire [15:0]sum,sum1;
	wire Cout0,Cout1;
	wire [15:0]Bneg;
	assign Bneg = ~B+1;
		
	Adder_16bit adder0(.A(A), .B(B), .Cin(Cin), .S(sum),.Cout(Cout0));
		Adder_16bit adder1(.A(A), .B(Bneg), .Cin(Cin), .S(sum1),.Cout(Cout1));

	always@(*)begin
		case(Mode)
			4'd0: begin
				Y = A<<1'b1;
				Cout = 1'b0;
				Overflow = 1'b0;
			end
			4'd1: begin
				Y = A<<<1'b1;
			end
			4'd2: begin
				Y = A>>1'b1;
			end
			4'd3: begin
				Y = $signed(A)>>>1'b1;
			end
			4'd4: begin
				Y = sum;
				Cout = Cout0;
				Overflow = (A[15]&B[15]&~Y[15])|(~A[15]&~B[15]&Y[15]);
			end
			4'd5: begin
				Y = sum1;
				Cout = Cout1;
				Overflow =  (A[15]&Bneg[15]&~Y[15])|(~A[15]&~Bneg[15]&Y[15]);
			end
			4'd6: begin
				Y = A&B;
			end
			4'd7: begin
				Y = A|B;
			end
			4'd8: begin
				Y = ~A;
			end
			4'd9: begin
				Y = A^B;
			end
			4'd10: begin
				Y = ~(A^B);
			end
			4'd11: begin
				Y = ~(A|B);
			end
			4'd12: begin
				Y = 1 << A[3:0];
			end
			4'd13: begin
				Y = A;
			end
			4'd14: begin
				Y = B;
			end
			4'd15: begin
				if(A[15]==1)
					Y = {12'b0, 4'b1111};
				else if(A[14]==1)
					Y = {12'b0, 4'b1110};
				else if(A[13]==1)
					Y = {12'b0, 4'b1101};
				else if(A[12]==1)
					Y = {12'b0, 4'b1100};
				else if(A[11]==1)
					Y = {12'b0, 4'b1011};
				else if(A[10]==1)
					Y = {12'b0, 4'b1010};
				else if(A[9]==1)
					Y = {12'b0, 4'b1001};
				else if(A[8]==1)
					Y = {12'b0, 4'b1000};
				else if(A[7]==1)
					Y = {12'b0, 4'b0111};
				else if(A[6]==1)
					Y = {12'b0, 4'b0110};
				else if(A[5]==1)
					Y = {12'b0, 4'b0101};
				else if(A[4]==1)
					Y = {12'b0, 4'b0100};
				else if(A[3]==1)
					Y = {12'b0, 4'b0011};
				else if(A[2]==1)
					Y = {12'b0, 4'b0010};
				else if(A[1]==1)
					Y = {12'b0, 4'b0001};
				else if(A[0]==1)
					Y = {12'b0, 4'b0000};
			end
			default: begin
			end
		endcase
	end
endmodule
