module PAT(clk, reset, data, flag);
	input clk, reset, data;
	output flag;	
	parameter IDLE=0, S0=1, S00=2, S001=3, S0011=4, S00110=5, S001101=6, S0011011=7, S00110111=8;
	reg [3:0] cur_state, next_state;

	assign flag = (cur_state == S00110111) ? 1:0;

    	always@(posedge clk)begin
        	if(reset)
            		cur_state <= IDLE;
        	else
            		cur_state <= next_state;
    	end

    	always@(cur_state or data)begin
		case(cur_state)
			IDLE:begin
				if(data == 0) 
					next_state = S0;
				else	
					next_state = IDLE;
			end
			S0: begin
				if(data == 0) 
					next_state = S00;
				else	
					next_state = IDLE;
			end
			S00: begin
				if(data) 
					next_state = S001;
				else	
					next_state = S00; 
			end
			S001: begin
				if(data) 
					next_state = S0011;
				else	
					next_state = S0; //0010
			end
			S0011: begin
				if(!data) 
					next_state = S00110;
				else	
					next_state = IDLE; //00111
			end
			S00110: begin
				if(data) 
					next_state = S001101; 
				else	
					next_state = S00; //0011_00
			end
			S001101: begin
				if(data) 
					next_state = S0011011;
				else	
					next_state = S0; //0011010
			end
			S0011011: begin
				if(data) 
					next_state = S00110111;
				else	
					next_state = S00110;
			end
			S00110111: begin
				if(data) 
					next_state = IDLE; //001101111
				else	
					next_state = S0; //001101110 
			end
		endcase
	end
endmodule





